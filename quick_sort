# 快排的几种写法
----------------------------
def quick_sort(nums, head, tail):
    left = head
    right = tail - 1
    key = head
    while left < right:
        while left < right and nums[right] > nums[key]:
            right -= 1
        while left < right and nums[left] <= nums[key]:
            left += 1
        nums[left], nums[right] = nums[right], nums[left]
    nums[head], nums[left] = nums[left], nums[head]
    lp, rp = [], []
    if left - head > 0:
        lp = quick_sort(nums, head, left)
    if tail - right - 1 > 0:
        rp = quick_sort(nums, right + 1, tail)
    return lp + [nums[left]] + rp
quick_sort([2,5,1,7,0,3,9,4,6],2,7)
----------------------------
def quick_sort(nums):
    n=len(nums)
    left=0
    right=n-1
    key=nums[left]
    while left<right:
        while left<right and nums[right]>key:
            right-=1
        while left<right and nums[left]<=key:
            left+=1
        nums[left],nums[right]=nums[right],nums[left]
    nums[0],nums[left]=nums[left],nums[0]
    lp, rp = [], []
    if left-0>0:
        lp=quick_sort(nums[:left])
 
    if n-right-1>0:
        rp=quick_sort(nums[right+1:])

    return lp+[nums[left]]+rp
-------------------------------------
def quick_sort(nums,m,n):
    key=m
    left=m
    right=n
    while left<right:
        while left<right and nums[right]>nums[key]:
            right-=1
        while left<right and nums[left]<=nums[key]:
            left+=1
        nums[left],nums[right]=nums[right],nums[left]
    nums[m],nums[left]=nums[left],nums[m]

    if left-m>0:
        quick_sort(nums,m,left)
    if n-right-1>0:
        quick_sort(nums,right+1,n)
    return nums
----------------------------------------------
def quick_sort1(nums):
    left = 0
    key = left
    n = len(nums)
    right = n - 1
    print('111')
    while left < right:
        while left < right and nums[right] > nums[key]:
            right -= 1
        while left < right and nums[left] <= nums[key]:
            left += 1
        nums[left], nums[right] = nums[right], nums[left]
        print('---')
    nums[0], nums[left] = nums[left], nums[0]
    print('222')
    if left - 0 > 0:
        print('left0:',nums)
        print('left0:1',nums[:left])
        quick_sort1(nums[:left])
        print('left:',nums[:])
    print('333')
    if n - (right + 1) > 0:
        print('right0:',nums)
        print('right0:1',nums[right+1:])
        quick_sort1(nums[right + 1:])
        print('right:',nums)
    print('444')
    return nums
quick_sort1([2,9,0,1,8,3])
# https://blog.csdn.net/zuichudeheart/article/details/52041798
# 递归的时候变量都保存在栈里，result里面存的是l_output的地址。但是，当递归函数运行结束，l_output就被pop掉了。所以上面这种快排写法是错误的
# 上面这种方法的debug结果是：
111
---
---
222
left0: [0, 1, 2, 9, 8, 3]
left0:1 [0, 1]
111
---
222
333
right0: [0, 1]
right0:1 [1]
111
222
333
444
right: [0, 1]
444
left: [0, 1, 2, 9, 8, 3]
333
right0: [0, 1, 2, 9, 8, 3]
right0:1 [9, 8, 3]
111
---
222
left0: [3, 8, 9]
left0:1 [3, 8]
111
---
222
333
right0: [3, 8]
right0:1 [8]
111
222
333
444
right: [3, 8]
444
left: [3, 8, 9]
333
444
right: [0, 1, 2, 9, 8, 3]
444
output：[0, 1, 2, 9, 8, 3]
------------------------------
